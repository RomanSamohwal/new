{"version":3,"sources":["Task_1/Message/Message.module.css","Task_3/Input.module.css","Task_2/Quality.module.css","Task_3/Button.module.css","Task_1/Name/Name.module.css","Task_3/Counter.module.css","logo.svg","Task_1/Name/Name.jsx","Task_2/Quality.jsx","Task_1/Message/Message.jsx","Task_3/Input.jsx","Task_3/Span.jsx","Task_3/Butt.jsx","Task_3/Button.jsx","Task_4/InputNames.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Name","className","s","name","Quality","newArray","map","num","i","quality","key","toString","qualityAll","Message","wrapper","cloud","before","after","time","Input","render","input_box","input","ref","props","reference","type","placeholder","React","Component","Span","state","count","Butt","box_button","button","onClick","onAddClick","Counter","counter_box","InputNames","newNames","App","createRef","newName","current","value","newCount","changed","alert","focus","newArr","setState","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f59f941.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cloud\":\"Message_cloud__3rxLo\",\"wrapper\":\"Message_wrapper__NLwYW\",\"before\":\"Message_before__3mi62\",\"after\":\"Message_after__rxgmH\",\"name\":\"Message_name__2ujuC\",\"text\":\"Message_text__1EZae\",\"time\":\"Message_time__hr0-q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_box\":\"Input_input_box__TOd_o\",\"input\":\"Input_input__38NUu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"qualityAll\":\"Quality_qualityAll__2uc_i\",\"quality\":\"Quality_quality__2xrJa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box_button\":\"Button_box_button__3vnMl\",\"button\":\"Button_button__19vrJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Name_name__Kj_Ji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_box\":\"Counter_counter_box__1w0OF\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport s from \"./Name.module.css\";\n\nconst Name = () => {\n    return <h1 className={s.name}>ROMAN SAMOHWAL</h1>\n}\nexport default Name;","import React from 'react';\nimport s from \"./Quality.module.css\";\n\nfunction Quality() {\n    let array = [\"рационалист\", \"пофигист\", \"максималист\", \"перфекционист\"];\n    let newArray = array.map((num, i) => {\n        if (i === 1) {\n            return <div className={s.quality} key={num.toString()}>{num}</div>;\n        } else {\n            return <div className={s.qualityAll} key={num.toString()}>{num}</div>\n        }\n    });\n    return (\n        <div>\n            {newArray}\n        </div>\n    );\n}\n\nexport default Quality;","import React from 'react';\nimport s from \"./Message.module.css\";\n\nconst Message = () => {\n    return <div className={s.wrapper}>\n        <div className={s.cloud}>\n            <div className={s.cloud}>\n                <div className={s.name}>Самохвал Роман Сергеевич</div>\n                <div className={s.before}></div>\n                <div className={s.after}></div>\n                ####################################################################################\n                <div className={s.time}>\n                    13.04.2020\n                </div>\n            </div>\n\n        </div>\n    </div>\n}\n\nexport default Message;","import React from 'react';\nimport s from \"./Input.module.css\";\n\nclass Input extends React.Component {\n\n\n\n    render = () => {\n        return <div className={s.input_box}>\n            <input className={s.input} ref={this.props.reference} type={\"text\"}\n                   placeholder={\"enter your name\"}/></div>\n    }\n}\n\nexport default Input;","import React from 'react';\nimport s from \"./Input.module.css\";\n\nclass Span extends React.Component {\n\n\n\n    render = () => {\n        return <div><span>{this.props.state.count}</span></div>\n    }\n}\n\nexport default Span;","import React from 'react';\nimport s from \"./Button.module.css\";\nimport Span from \"./Span\";\n\n\nclass Butt extends React.Component {\n\n    render = () => {\n        return <div className={s.box_button}>\n            <Span state = {this.props.state}/>\n            <button className={s.button} onClick={this.props.onAddClick}>Press the button</button>\n        </div>\n    }\n}\n\nexport default Butt;","import React from 'react';\nimport s from \"./Counter.module.css\";\nimport Input from \"./Input\";\nimport Butt from \"./Butt\";\n\n\nclass Counter extends React.Component {\n\n\n   /* onAddClick = () => {\n        let newName = this.reference.current.value;\n        let newCount = this.props.state.count + 1;\n        this.props.changed(newCount, newName);\n        alert(\"Hello \" + newName);\n        this.reference.current.value = \"\";\n        this.reference.current.focus();\n    };\n    reference = React.createRef();*/\n\n    render = () => {\n        return <div className={s.counter_box}>\n            <Input reference={this.props.reference}/>\n            <Butt onAddClick = {this.props.onAddClick} state = {this.props.state}/>\n        </div>\n    }\n}\n\nexport default Counter;","import React from 'react';\n\n\n\nclass InputNames extends React.Component {\n    render = () => {\n       let newNames = this.props.name.map((name)=><div>{name}</div>);\n        return <div>{newNames}</div>\n    }\n}\n\nexport default InputNames;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Name from \"./Task_1/Name/Name\";\nimport Quality from \"./Task_2/Quality\";\nimport Message from \"./Task_1/Message/Message\";\nimport Counter from \"./Task_3/Button\";\nimport InputNames from \"./Task_4/InputNames\";\n\nclass App extends React.Component {\n    state = {\n        count: 0,\n        name: []\n    };\n    reference = React.createRef();\n\n    onAddClick = () => {\n        let newName = this.reference.current.value;\n        let newCount = this.state.count + 1;\n        this.changed(newCount, newName);\n        alert(\"Hello \" + newName);\n        this.reference.current.value = \"\";\n        this.reference.current.focus();\n    };\n\n\n    changed = (newCount, newName)=>{\n        let newArr = [...this.state.name, newName];\n        this.setState({\n            count: newCount,\n            name: newArr\n        });\n    };\n\n\n    render = () => {\n        return (\n            <div className={\"App\"}>\n                <Name/>\n                <Message/>\n                <Quality/>\n                <Counter state={this.state} onAddClick = {this.onAddClick} reference = {this.reference} />\n                <InputNames name={this.state.name}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}